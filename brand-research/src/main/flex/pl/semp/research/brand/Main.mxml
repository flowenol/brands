<?xml version="1.0" encoding="utf-8"?>
<!--

     Copyright 2008 Marvin Herman Froeder
     Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
     http://www.apache.org/licenses/LICENSE-2.0
     Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.


-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:view="pl.semp.research.brand.views"
			   width="600" height="400" minWidth="600" minHeight="400"
			   applicationComplete="applicationCompleteHandler(event)" xmlns:views="pl.semp.research.brand.views.*">
	<fx:Script>
		
		<![CDATA[
			import com.googlecode.flexxb.core.FxBEngine;
			
			import mx.binding.utils.BindingUtils;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import pl.semp.research.brand.configuration.Configuration;
			import pl.semp.research.brand.configuration.ConfigurationStep;
			import pl.semp.research.brand.data.Data;
			import pl.semp.research.brand.data.StepData;
			import pl.semp.research.brand.events.StepCompletedEvent;
			
			[Bindable]
			private var configUrl:String;
			
			[Bindable]
			private var configuration:Configuration;
			
			private var data:Data;
			
			private var numberOfSteps:int;
			
			private var currentStep:int;
			
			[Bindable]
			private var registeredValues:Dictionary;
			
			protected function applicationCompleteHandler(event:FlexEvent):void
			{
				configUrl = FlexGlobals.topLevelApplication.parameters.configUrl != null ? FlexGlobals.topLevelApplication.parameters.configUrl : CONFIG::configUrl;
				this.getConfig.send();
			}
			
			protected function getConfigHandler(event:ResultEvent):void
			{
				var configuration:Configuration = FxBEngine.instance.getXmlSerializer().deserialize(event.result as XML, Configuration) as Configuration;
				this.configuration = configuration;
				this.numberOfSteps = (configuration.steps) ? configuration.steps.length : 0;
				this.currentStep = 0;
				
				this.data = new Data();
				this.data.name = configuration.name;
				this.registeredValues = new Dictionary();
				
				processConfigurationSteps(null);
			}
			
			protected function processConfigurationSteps(event:StepCompletedEvent):void {
				var step:ConfigurationStep = null;
				if (!event && this.numberOfSteps > 0) {
					step = configuration.steps.getItemAt(0) as ConfigurationStep;
					determineStepType(step);
				} else {
					// process step data from event
					var stepData:StepData = event.stepData;
					if (stepData) {
						step = configuration.steps.getItemAt(this.currentStep) as ConfigurationStep;
						stepData.name = step.name;
						
						data.steps.addItem(stepData);
					}

					// process next step 
					this.currentStep += 1;
					
					if (this.currentStep <= this.numberOfSteps - 1) {
						step = configuration.steps.getItemAt(this.currentStep) as ConfigurationStep;
						determineStepType(step);
					} else {
						trace("End of poll");
						this.currentState = "End";
						
						sendResultData();
					}
				}
			}
			
			protected function determineStepType(step:ConfigurationStep):void {
				trace('Processing step: ' + step.name);
				
				if (step.message) {
					trace('Step type: message');
					this.currentState = "Message";
					messageView.data = step.message;
				} else if (step.input) {
					trace('Step type: input');
					this.currentState = "Input";
					inputView.data = step.input;
				} else if (step.dictionary) {
					trace('Step type: dictionary');
					this.currentState = "Dictionary";
					dictionaryView.dictionary = configuration.dictionary;
					dictionaryView.fakeDictionary = configuration.fakeDictionary;
					dictionaryView.data = step.dictionary;
				}
			}
			
			protected function sendResultData():void {
				var dataXML:XML = FxBEngine.instance.getXmlSerializer().serialize(data) as XML;
				trace(dataXML);
				
				var params:Object = new Object();
				params.formData = dataXML;
				
				trace("Sending data to " + configuration.url);
				postFormData.send(params);
			}
			
			protected function repeatHandler(event:MouseEvent):void
			{
				applicationCompleteHandler(null);
			}
			
			protected function dataSendFaultHandler(event:FaultEvent):void
			{
				if (event.statusCode == 400) {
					Alert.show("Bad request while sending data to " + configuration.url, "Bad Request");	
				} else {
					Alert.show("Unable to send data to " + configuration.url, "Data Error");
				}
			}
			
			protected function getConfigFaultHandler(event:FaultEvent):void
			{
				Alert.show(event.message.toString());
			}
			
		]]>
		
		
	</fx:Script>
	<s:states>
		<s:State name="Message"/>
		<s:State name="Input"/>
		<s:State name="Dictionary"/>
		<s:State name="End"/>
	</s:states>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:HTTPService id="getConfig"
						method="get"
						url="{configUrl}"
						resultFormat="e4x"
						result="getConfigHandler(event)"
						fault="getConfigFaultHandler(event)">
		</mx:HTTPService>
		<mx:HTTPService id="postFormData"
						method="post"
						url="{configuration.url}"
						fault="dataSendFaultHandler(event)">
		</mx:HTTPService>
	</fx:Declarations>
	<views:MessageStepView id="messageView" registeredValues="{registeredValues}" includeIn="Message" width="100%" height="100%" stepCompleted="processConfigurationSteps(event)"/>
	<views:InputStepView id="inputView" registeredValues="{registeredValues}" includeIn="Input" width="100%" height="100%" stepCompleted="processConfigurationSteps(event)"/>
	<views:DictionaryStepView id="dictionaryView" registeredValues="{registeredValues}" includeIn="Dictionary" width="100%" height="100%" stepCompleted="processConfigurationSteps(event)"/>
	<s:Button x="473" y="362" label="PowtÃ³rz" includeIn="End" click="repeatHandler(event)"
			  icon="@Embed(source='/assets/repeat.png')"/>
</s:Application>
